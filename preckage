#!/bin/bash

#NO SUPPORT FOR BEDROCKLINUX

mkdir -p ~/.cache/preckage/
export admin="sudo" # change to doas if you do not have sudo.

# Check what package manager there are.
if test -f /usr/bin/dnf; then
  export pkg_mgr=dnf
  export install="dnf install"
  export search="dnf search"
  export remove="dnf remove"
  export autoremove="dnf autoremove"
  export clean="dnf clean all"
  export list="dnf list --installed"
  export info="dnf info"
  export upgrade="dnf upgrade"
elif test -f /usr/bin/apt; then
  export pkg_mgr=apt
  export install="apt install"
  export search="apt search"
  export remove="apt remove"
  export autoremove="apt autoremove"
  export clean="apt clean"
  export list="apt list --installed"
  export info="apt show"
  export upgrade="apt update && apt upgrade"
elif test -f /usr/bin/pacman; then
  export pkg_mgr=pacman
  export install="pacman -S"
  export search="pacman -Ss"
  export remove="pacman -Rs"
  export autoremove="pacman -Rns $(pacman -Qdtq)"
  export clean="pacman -Sc"
  export list="pacman -Qe"
  export info="pacman -Qi"
  export upgrade="pacman -Syu"
elif test -f /usr/bin/xbps-install; then
  export pkg_mgr=xbps-install
  export install="xbps-install -S"
  export search="xbps-query -Rs"
  export remove="xbps-remove -R"
  export autoremove="xbps-remove -O"
  export clean="xbps-remove -c"
  export list="xbps-query -l"
  export info="xbps-query -f"
  export upgrade="xbps-install -Su"
elif test -f /usr/bin/apk; then
  export pkg_mgr=apk
  export install="apk add"
  export search="apk search"
  export remove="apk del"
  export autoremove="apk del --purge $(apk info -q --depends --recursive $(apk info -q --installed))"
  export clean="apk cache clean"
  export list="apk info -v"
  export info="apk info -v"
  export upgrade="apk upgrade"
elif test -f /usr/bin/emerge; then
  export pkg_mgr=emerge
  export install="emerge --ask"
  export search="eix"
  export remove="emerge --ask --depclean"
  export autoremove="emerge --ask --depclean"
  export clean="emerge --ask --verbose --depclean"
  export list="eix -I"
  export info="eix"
  export upgrade="emerge --ask --update --deep --newuse @world"
elif test -f /usr/bin/zypper; then
  export pkg_mgr=zypper
  export install="zypper install"
  export search="zypper search"
  export remove="zypper remove"
  export autoremove="zypper remove --clean-deps"
  export clean="zypper clean"
  export list="zypper se --installed-only"
  export info="zypper info"
  export upgrade="zypper update"
elif test -f /usr/bin/eopkg; then
  export pkg_mgr=eopkg
  export install="eopkg it"
  export search="eopkg se"
  export remove="eopkg rm"
  export autoremove="eopkg rm -u"
  export clean="eopkg dc"
  export list="eopkg li"
  export info="eopkg info"
  export upgrade="eopkg up"
else
  return 0
fi

# check which aur helper, if any.
if test -f /usr/bin/yay; then
  export yay=yes
  export yayinstall="yay -S"
  export yaysearch="yay -Ss"
  export yayremove="yay -Rns"
  export yayautoremove="yay -Rns $(yay -Qdtq)"
  export yayclean="yay -Sc"
  export yaylist="yay -Qe"
  export yayinfo="yay -Qi"
  export yayupgrade="yay -Syu"
else
  export yay=no
fi

if test -f /usr/bin/paru; then
  export paru=yes
  export paruinstall="paru -S"
  export parusearch="paru -Ss"
  export paruremove="paru -Rns"
  export paruautoremove="paru -Rns $(paru -Qdtq)"
  export paruclean="paru -Sc"
  export parulist="paru -Qe"
  export paruinfo="paru -Qi"
  export paruupgrade="paru -Syu"
else
  export paru=no
fi

# flatpak
if test -f /usr/bin/flatpak; then
  export flatpak=yes
  export flatpakinstall="flatpak install"
  export flatpaksearch="flatpak search"
  export flatpakremove="flatpak uninstall"
  export flatpakautoremove="flatpak uninstall --unused"
  export flatpakclean="flatpak uninstall --unused"
  export flatpaklist="flatpak list"
  export flatpakinfo="flatpak info"
  export flatpakupgrade="flatpak update"
else
  export flatpak=no
fi

# pip
if test -f /usr/bin/pip; then
  export pip=yes
  export pipinstall="pip install"
  export pipsearch="pip search"
  export pipremove="pip uninstall"
  export pipautoremove="pip-autoremove"
  export pipclean="pip cache purge"
  export piplist="pip list"
  export pipinfo="pip show"
  export pipupgrade="pip install --upgrade"
else
  export pip=no
fi

# snap
if test -f /usr/bin/snap; then
  export snap=yes
  export snapinstall="snap install"
  export snapsearch="snap find"
  export snapremove="snap remove"
  export snapautoremove="snap remove --purge"
  export snapclean="snap remove --purge"
  export snaplist="snap list"
  export snapinfo="snap info"
  export snapupgrade="snap refresh"
else
  export snap=no
fi

# nix
if test -f /usr/bin/nix; then
  export nix=yes
  export nixinstall="nix-env -iA nixos."
  export nixsearch="nix-env -qaP"
  export nixremove="nix-env -e"
  export nixautoremove="nix-env --delete-generations old"
  export nixclean="nix-collect-garbage"
  export nixlist="nix-env -q"
  export nixinfo="nix-env -qa"
  export nixupgrade="nix-env -u"
else
  export nix=no
fi

if [ "$1" = "-h" ] || [[ -z "$1" ]]; then
  echo "Usage:
preckage [arg] [options] (package-name)

Arguments:
-f, -flat, --flatpak | to use flatpak
-s, -snap, --snap | to use snap
-p, -pip, --pip | to use pip
-y, -yay, --yay | to use yay
-pa, -paru, --paru | to use paru
Example: preckage -f se boxes | this will search for 'boxes' in flatpak

Options:
in, install | install package(s)
re, remove | remove package(s)
cl, clean | clean cache
au, autoremove | remove unnessary dep
se, search | search for package(s)
inf, info | find info about package(s)
up, upgrade | update all packages
Example: preckage se boxes | this will search for 'boxes' in sys repo."

elif [ "$1" = install ] || [ "$1" = in ]; then
  ${admin} ${install} $2
elif [ "$1" = remove ] || [ "$1" = re ]; then
  ${admin} ${remove} $2
elif [ "$1" = clean ] || [ "$1" = cl ]; then
  ${admin} ${clean}
elif [ "$1" = autoremove ] || [ "$1" = au ]; then
  ${admin} ${autoremove}
elif [ "$1" = search ] || [ "$1" = se ]; then
  ${search} $2
elif [ "$1" = info ] || [ "$1" = inf ]; then
  ${info} $2
elif [ "$1" = upgrade ] || [ "$1" = up ]; then
  ${admin} ${upgrade}
fi

if [ "$1" = --flatpak ] || [ "$1" = -flat ] || [ "$1" = -f ]; then
  if [ "$2" = install ] || [ "$2" = in ]; then
    ${flatpakinstall} $3
  elif [ "$2" = remove ] || [ "$2" = re ]; then
    ${flatpakremove} $3
  elif [ "$2" = clean ] || [ "$2" = cl ]; then
    ${flatpakclean}
  elif [ "$2" = autoremove ] || [ "$2" = au ]; then
    ${flatpakautoremove}
  elif [ "$2" = search ] || [ "$2" = se ]; then
    ${flatpaksearch} $3
  elif [ "$2" = info ] || [ "$2" = inf ]; then
    ${flatpakinfo} $3
  elif [ "$2" = upgrade ] || [ "$2" = up ]; then
    ${flatpakupgrade}
  fi
elif [ "$1" = --snap ] || [ "$1" = -snap] || [ "$1" = -s ]; then
  if [ "$2" = install ] || [ "$2" = in ]; then
    ${snapinstall} $3
  elif [ "$2" = remove ] || [ "$2" = re ]; then
    ${snapremove} $3
  elif [ "$2" = clean ] || [ "$2" = cl ]; then
    ${snapclean}
  elif [ "$2" = autoremove ] || [ "$2" = au ]; then
    ${snapautoremove}
  elif [ "$2" = search ] || [ "$2" = se ]; then
    ${snapsearch} $3
  elif [ "$2" = info ] || [ "$2" = inf ]; then
    ${snapinfo} $3
  elif [ "$2" = upgrade ] || [ "$2" = up ]; then
    ${snapupgrade}
  fi
elif [ "$1" = --pip ] || [ "$1" = -pip ] || [ "$1" = -p ]; then
  if [ "$2" = install ] || [ "$2" = in ]; then
    ${pipinstall} $3
  elif [ "$2" = remove ] || [ "$2" = re ]; then
    ${pipremove} $3
  elif [ "$2" = clean ] || [ "$2" = cl ]; then
    ${pipclean}
  elif [ "$2" = autoremove ] || [ "$2" = au ]; then
    ${pipautoremove}
  elif [ "$2" = search ] || [ "$2" = se ]; then
    ${pipsearch} $3
  elif [ "$2" = info ] || [ "$2" = inf ]; then
    ${pipinfo} $3
  elif [ "$2" = upgrade ] || [ "$2" = up ]; then
    ${pipupgrade}
  fi
elif [ "$1" = --yay ] || [ "$1" = -yay ] || [ "$1" = -y ]; then
  if [ "$2" = install ] || [ "$2" = in ]; then
    ${yayinstall} $3
  elif [ "$2" = remove ] || [ "$2" = re ]; then
    ${yayremove} $3
  elif [ "$2" = clean ] || [ "$2" = cl ]; then
    ${yayclean}
  elif [ "$2" = autoremove ] || [ "$2" = au ]; then
    ${yayautoremove}
  elif [ "$2" = search ] || [ "$2" = se ]; then
    ${yaysearch} $3
  elif [ "$2" = info ] || [ "$2" = inf ]; then
    ${yayinfo} $3
  elif [ "$2" = upgrade ] || [ "$2" = up ]; then
    ${flatpakupgrade}
  fi
elif [ "$1" = --paru ] || [ "$1" = -paru ] || [ "$1" = -pa ]; then
  if [ "$2" = install ] || [ "$2" = in ]; then
    ${paruinstall} $3
  elif [ "$2" = remove ] || [ "$2" = re ]; then
    ${paruremove} $3
  elif [ "$2" = clean ] || [ "$2" = cl ]; then
    ${paruclean}
  elif [ "$2" = autoremove ] || [ "$2" = au ]; then
    ${paruautoremove}
  elif [ "$2" = search ] || [ "$2" = se ]; then
    ${parusearch} $3
  elif [ "$2" = info ] || [ "$2" = inf ]; then
    ${paruinfo} $3
  elif [ "$2" = upgrade ] || [ "$2" = up ]; then
    ${paruupgrade}
  fi
fi
